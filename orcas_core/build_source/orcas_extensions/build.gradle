project.ext.extension_folder_include = "*.java"
project.ext.extension_folder_exclude = "*SyntaxExtension*.java"
project.ext.extension_interface_name = "Extension"
project.ext.extension_package_name = "extensions"

apply from: '../extension_build_plugin.gradle'

apply from: '../maven_publish.gradle'
project.ext.maven_artifactId_postfix = 'extenions'
project.ext.extensiondependent = true
project.ext.maven_description = 'orcas custom extensions (contains only support classes and an empty-extension). If custom-extensions are provided, there will be a custom artifact.'

apply from: '../build_sqlplus_dir_acc.gradle'

class SyncWithDeleteTask extends DefaultTask 
{
  @InputDirectory
  File fromDir

  @OutputDirectory
  File intoDir

  String excludeDef
  String excludeDef2
  String includeDef

  @TaskAction
  def doIt() 
  {
    ant.delete(dir: intoDir)
    ant.copy(todir: intoDir) 
    {
      fileset(dir: fromDir) 
      {
        include(name: includeDef)
        exclude(name: excludeDef)
        exclude(name: excludeDef2)
      }
    }
  }
}

dependencies 
{
  compile project(':orcas_syex')
}

task(createSqlplusDir) 
{
  doFirst
  {
    new File("${buildDir}/sqlplus/sql/replaceables/packages").mkdirs();
  }
  outputs.file "${buildDir}/sqlplus/sql/replaceables/packages"
}

task(copyPlsqlExtensions, type: SyncWithDeleteTask) 
{
  fromDir = file(project.ext.extension_folder)
  intoDir = file("${buildDir}/plsql_extensions")

  excludeDef = "*reverse*"
  excludeDef2 = "*helper*"
  includeDef = "*.sql"
}

task(copyPlsqlReverseExtensions, type: SyncWithDeleteTask) 
{
  fromDir = file(project.ext.extension_folder)
  intoDir = file("${buildDir}/plsql_reverse_extensions")

  excludeDef = "*helper*"
  includeDef = "*reverse*.sql"
}

task(copyAllPlsqlExtensions, dependsOn: createSqlplusDir, type: SyncWithDeleteTask) 
{
  fromDir = file(project.ext.extension_folder)
  intoDir = file("${buildDir}/sqlplus/sql/replaceables/packages")

  includeDef "*.sql"
}

task(generatePlsqlExtension)
{
  inputs.dir "${buildDir}/plsql_extensions"
  inputs.dir "${buildDir}/plsql_reverse_extensions"
  outputs.file new File("${buildDir}/sqlplus/sql/replaceables/packages/b_pa_orcas_extensions.sql")
  outputs.file new File("${buildDir}/java_plsql/PlSqlExtensionInfo.java")

  doLast 
  {
    def boolean lHasAnyExtensions = false;
    new File("${buildDir}/plsql_extensions").mkdirs();
    new File("${buildDir}/plsql_reverse_extensions").mkdirs();
    new File("${buildDir}/sqlplus/sql/replaceables/packages").mkdirs();
    def allPlsqlFile = new File("${buildDir}/sqlplus/sql/replaceables/packages/b_pa_orcas_extensions.sql");
    allPlsqlFile.delete();
    allPlsqlFile << """
create or replace package body pa_orcas_extensions is
  function is_extensions_exists return number
  is
  begin
"""
    new File("${buildDir}/plsql_extensions").listFiles().sort{ it.name }.each
    { 
      lHasAnyExtensions = true;
      allPlsqlFile << """    return 1; 
"""
    }
    new File("${buildDir}/plsql_reverse_extensions").listFiles().sort{ it.name }.each
    { 
      lHasAnyExtensions = true;
      allPlsqlFile << """    return 1; 
"""
    }


    allPlsqlFile << """
    return 0;
  end;

  function call_extensions( p_input in ot_syex_model, p_extension_parameter in varchar2 ) return ot_syex_model
  is
    v_syex_model ot_syex_model;
  begin
    pa_orcas_extension_parameter.set_extension_parameter( p_extension_parameter );

    v_syex_model := p_input;
"""
 
    new File("${buildDir}/plsql_extensions").listFiles().sort{ it.name }.each
    { 
      allPlsqlFile << """    v_syex_model := ${it.getName().split('\\.')[0]}.run( v_syex_model ); 
"""
    }

    allPlsqlFile << """
    return v_syex_model; 
  end;

  function call_reverse_extensions( p_input in ot_syex_model, p_extension_parameter in varchar2 ) return ot_syex_model
  is
    v_syex_model ot_syex_model;
  begin
    pa_orcas_extension_parameter.set_extension_parameter( p_extension_parameter );

    v_syex_model := p_input;
"""

    new File("${buildDir}/plsql_reverse_extensions").listFiles().sort{ it.name }.each
    { 
      allPlsqlFile << """    v_syex_model := ${it.getName().split('\\.')[0]}.run( v_syex_model ); 
"""
    }

    allPlsqlFile << """
    return v_syex_model; 
  end;
end;
/
"""

    new File("${buildDir}/java_plsql").mkdirs();
    def lPlSqlExtensionInfoFile = new File("${buildDir}/java_plsql/PlSqlExtensionInfo.java");
    lPlSqlExtensionInfoFile.delete();
    lPlSqlExtensionInfoFile << """
package de.opitzconsulting.orcas.${project.ext.extension_package_name};

public class PlSqlExtensionInfo
{
  public static boolean hasExtensions()
  {
"""
    if( lHasAnyExtensions )
    { 
      lPlSqlExtensionInfoFile << """    
    return true; 
"""
    }
    else
    {
      lPlSqlExtensionInfoFile << """
    return false;
"""
    }

    lPlSqlExtensionInfoFile << """
  }

  public static String getOrcasVersion()
  {
    return "${project.version}";
  }
}
"""
  }
}

task(generateExtensionHeader)
{
  inputs.dir "${buildDir}/plsql_extensions"
  inputs.dir "${buildDir}/plsql_reverse_extensions"
  outputs.dir new File("${buildDir}/sqlplus/sql/replaceables/packages")

  doLast 
  {
    new File("${buildDir}/plsql_extensions").mkdirs();
    inputs.getFiles().getFiles().each
    { 
      def package_name = it.getName().split('\\.')[0];
      def plsqlHeaderFile = new File("${buildDir}/sqlplus/sql/replaceables/packages/${package_name}_spec.sql");
      plsqlHeaderFile.delete();
      plsqlHeaderFile << """create or replace package ${package_name} is
function run( p_input in ot_syex_model ) return ot_syex_model;
end;
/
"""
    }
  }
}

//compileJava.source new File("${buildDir}/java_plsql")
compileJava.dependsOn generatePlsqlExtension

generatePlsqlExtension.dependsOn copyPlsqlExtensions, copyPlsqlReverseExtensions, createSqlplusDir
generateExtensionHeader.dependsOn copyPlsqlExtensions, copyPlsqlReverseExtensions, createSqlplusDir

jar.dependsOn generatePlsqlExtension, generateExtensionHeader, copyAllPlsqlExtensions

sourceSets {
  main {
    java {
      srcDirs new File("${buildDir}/java_plsql")
    }
    resources  {
      srcDirs "${buildDir}/sqlplus"
    }
  }
}

generateJavaSqlplusDirAccessClass.dependsOn generatePlsqlExtension, generateExtensionHeader, copyAllPlsqlExtensions
generateJavaSqlplusDirAccessClass.sqlplusDir = "${buildDir}/sqlplus"

